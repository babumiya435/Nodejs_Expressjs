** Nodejs/Questions_Ans/Getting Started with Node.js **

Application: The express() function creates an Express application instance. This instance represents the entire web application and provides methods for configuring routes, middleware, and other settings.

Routing: Express provides a routing mechanism to define routes for handling different HTTP requests (GET, POST, PUT, DELETE, etc.). Routes are defined using methods like app.get(), app.post(), app.put(), app.delete(), etc.

Middleware: Middleware functions are the heart of Express.js. They are functions that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle. Middleware functions can perform tasks such as logging, authentication, data parsing, error handling, etc.

Request and Response Objects: Express extends the Node.js http.IncomingMessage and http.ServerResponse objects to provide additional functionality and convenience methods. These objects (req and res) represent the HTTP request and response respectively, and they are passed to middleware and route handler functions.

Router: The express.Router() class allows you to create modular, mountable route handlers. You can use routers to organize your routes into separate files or modules and then mount them at different paths in the main Express application.

Views and Templating Engines: Express supports rendering dynamic content using templating engines such as EJS, Handlebars, Pug (formerly Jade), etc. You can configure Express to use a specific templating engine and render views based on data provided by route handlers.

Static Files: Express can serve static files such as HTML, CSS, images, etc., using the express.static middleware. You specify a directory from which to serve static assets, and Express handles requests for files in that directory.


[Function: createApplication] {
  application: {
    init: [Function: init],
    defaultConfiguration: [Function: defaultConfiguration],
    lazyrouter: [Function: lazyrouter],
    handle: [Function: handle],
    use: [Function: use],
    route: [Function: route],
    engine: [Function: engine],
    param: [Function: param],
    set: [Function: set],
    path: [Function: path],
    enabled: [Function: enabled],
    disabled: [Function: disabled],
    enable: [Function: enable],
    disable: [Function: disable],
    acl: [Function (anonymous)],
    bind: [Function (anonymous)],
    checkout: [Function (anonymous)],
    connect: [Function (anonymous)],
    copy: [Function (anonymous)],
    delete: [Function (anonymous)],
    get: [Function (anonymous)],
    head: [Function (anonymous)],
    link: [Function (anonymous)],
    lock: [Function (anonymous)],
    'm-search': [Function (anonymous)],
    merge: [Function (anonymous)],
    mkactivity: [Function (anonymous)],
    mkcalendar: [Function (anonymous)],
    mkcol: [Function (anonymous)],
    move: [Function (anonymous)],
    notify: [Function (anonymous)],
    options: [Function (anonymous)],
    patch: [Function (anonymous)],
    post: [Function (anonymous)],
    propfind: [Function (anonymous)],
    proppatch: [Function (anonymous)],
    purge: [Function (anonymous)],
    put: [Function (anonymous)],
    rebind: [Function (anonymous)],
    report: [Function (anonymous)],
    search: [Function (anonymous)],
    source: [Function (anonymous)],
    subscribe: [Function (anonymous)],
    trace: [Function (anonymous)],
    unbind: [Function (anonymous)],
    unlink: [Function (anonymous)],
    unlock: [Function (anonymous)],
    unsubscribe: [Function (anonymous)],
    all: [Function: all],
    del: [Function (anonymous)],
    render: [Function: render],
    listen: [Function: listen]
  },
  request: IncomingMessage {
    header: [Function: header],
    get: [Function: header],
    accepts: [Function (anonymous)],
    acceptsEncodings: [Function (anonymous)],
    acceptsEncoding: [Function (anonymous)],
    acceptsCharsets: [Function (anonymous)],
    acceptsCharset: [Function (anonymous)],
    acceptsLanguages: [Function (anonymous)],
    acceptsLanguage: [Function (anonymous)],
    range: [Function: range],
    param: [Function: param],
    is: [Function: is],
    protocol: [Getter],
    secure: [Getter],
    ip: [Getter],
    ips: [Getter],
    subdomains: [Getter],
    path: [Getter],
    hostname: [Getter],
    host: [Getter],
    fresh: [Getter],
    stale: [Getter],
    xhr: [Getter]
  },
  response: ServerResponse {
    status: [Function: status],
    links: [Function (anonymous)],
    send: [Function: send],
    json: [Function: json],
    jsonp: [Function: jsonp],
    sendStatus: [Function: sendStatus],
    sendFile: [Function: sendFile],
    sendfile: [Function (anonymous)],
    download: [Function: download],
    type: [Function: contentType],
    contentType: [Function: contentType],
    format: [Function (anonymous)],
    attachment: [Function: attachment],
    append: [Function: append],
    header: [Function: header],
    set: [Function: header],
    get: [Function (anonymous)],
    clearCookie: [Function: clearCookie],
    cookie: [Function (anonymous)],
    location: [Function: location],
    redirect: [Function: redirect],
    vary: [Function (anonymous)],
    render: [Function: render]
  },
  Route: [Function: Route],
  Router: [Function (anonymous)] {
    param: [Function: param],
    handle: [Function: handle],
    process_params: [Function: process_params],
    use: [Function: use],
    route: [Function: route],
    acl: [Function (anonymous)],
    bind: [Function (anonymous)],
    checkout: [Function (anonymous)],
    connect: [Function (anonymous)],
    copy: [Function (anonymous)],
    delete: [Function (anonymous)],
    get: [Function (anonymous)],
    head: [Function (anonymous)],
    link: [Function (anonymous)],
    lock: [Function (anonymous)],
    'm-search': [Function (anonymous)],
    merge: [Function (anonymous)],
    mkactivity: [Function (anonymous)],
    mkcalendar: [Function (anonymous)],
    mkcol: [Function (anonymous)],
    move: [Function (anonymous)],
    notify: [Function (anonymous)],
    options: [Function (anonymous)],
    patch: [Function (anonymous)],
    post: [Function (anonymous)],
    propfind: [Function (anonymous)],
    proppatch: [Function (anonymous)],
    purge: [Function (anonymous)],
    put: [Function (anonymous)],
    rebind: [Function (anonymous)],
    report: [Function (anonymous)],
    search: [Function (anonymous)],
    source: [Function (anonymous)],
    subscribe: [Function (anonymous)],
    trace: [Function (anonymous)],
    unbind: [Function (anonymous)],
    unlink: [Function (anonymous)],
    unlock: [Function (anonymous)],
    unsubscribe: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  json: [Function: json],
  query: [Function: query],
  raw: [Function: raw],
  static: [Function: serveStatic] {
    mime: Mime {
      types: [Object: null prototype],
      extensions: [Object: null prototype],
      default_type: 'application/octet-stream',
      Mime: [Function: Mime],
      charsets: [Object]
    }
  },
  text: [Function: text],
  urlencoded: [Function: urlencoded]
}
